1. docker --version
Displays the installed Docker version.
root@ip-172-31-93-200:~# docker --version 
Docker version 28.1.1, build 4eba377

2. docker info
Displays system-wide information about Docker.
docker info

3. docker events
Displays real-time events from the Docker daemon.
docker events

4. docker pull
Downloads a Docker image from a registry like Docker Hub.(It will download latest version from the Docker Hub , If you wont specify the verison)
docker pull ubuntu
docker pull ubuntu:20.04 (specifying the version)

5. docker images
Lists all available images on your system.
docker images

6. docker rmi <image_id>
Removes a Docker image by its ID.
docker rmi b7bab04fd9aa


7. docker ps
Lists all running containers.
docker ps

8. docker ps -a
Lists all containers, including stopped ones.
docker ps -a

9. docker run <image_name>
Creates and starts a new container from a specified image.
docker run ubuntu

10. docker run -it <image_name>
Starts an interactive container session.(it will enter into the container) ctrl+D for exit 
docker run -it ubuntu /bin/bash
docker run -it ubuntu:latest /bin/bash

docker ps

11. docker start <container_id>
Starts an existing stopped container.
docker start abc123


12. docker stop <container_id>
Stops a running container.
docker stop abc123


13. docker restart <container_id>
Restarts a running or stopped container.
docker restart abc123

14. docker rm <container_id>
Removes a stopped container.
docker rm abc123
docker rm ebdae7a1a0ce 615f2500ba29 0ca2f4e6a8cc 


15. docker exec -it <container_id> <command>
Executes a command in a running container. (You cannot enter into a stopped container)
docker exec -it abc123 /bin/bash
docker run --name my-ubuntu-mine -it -d ubuntu:latest /bin/bash
docker run -d ubuntu:latest sleep infinity
docker exec -it abc123 /bin/bash


16. docker logs <container_id>
Displays the logs of a container.
docker logs abc123


17. docker inspect <container_id>
Provides detailed information about a container.
docker inspect abc123


cat Dockerfile 
# Base Image 
FROM nginx:alpine
# MAINTAINER of the Dockerfile
MAINTAINER Bikram <bikramatmedium@gmail.com>
#Copy the index.html file /usr/share/nginx/html/
COPY index.html /usr/share/nginx/html/
#Expose Nginx Port
EXPOSE 80
#Start NginxService 
CMD ["nginx", "-g", "daemon off;"]
root@ip-172-31-93-200:~# 
root@ip-172-31-93-200:~# cat index.html 
My first Dockerfile with Nginx!! Version-1.0

docker build -t nginx-app .

root@ip-172-31-93-200:~# docker run -d -p 80:80 --name Nginx-app nginx-app:latest
4828c765e2a7770da747f470b5c8ab2b2a31eef8668d64ad5e3e8d0974c7cc4c

18. docker build -t <image_name> <Dockerfile_path>
Builds an image from a Dockerfile.
docker build -t my_image .

19. docker tag <image_id> repository:tag
Tags an image for a repository.
docker tag abc123 myrepo/myimage:v1
docker tag nginx-app chaitanya795/nginx-app:latest


20. docker push repository:tag
Pushes an image to a Docker registry.
docker push myrepo/myimage:v1
docker push chaitanya795/nginx-app

21. docker pull repository:tag
Pulls an image from a Docker registry.
docker pull myrepo/myimage:v1
docker pull chaitanya795/nginx-app:latest


25. docker commit <container_id> <new_image_name>
Creates a new image from a container's changes.
docker commit abc123 my_image:v2
docker commit 6a68b7146604 nginx-app:v3.0

26. docker system prune
Removes unused data (stopped containers,networks, etc.).
docker system prune


27. docker stop $(docker ps -q)
Stops all running containers.
docker stop $(docker ps -q)

28. docker rm $(docker ps -a -q)
Removes all stopped containers.
docker rm $(docker ps -a -q)

29. docker rmi $(docker images -q)
Removes all images.
docker rmi $(docker images -q)

30. docker stats
Displays a live stream of container resource usage statistics.
docker stats
____________________________________________________________________________________________________
Understanding the docker stats Output

When you run docker stats, you'll see a table with the following columns (the exact format might vary slightly depending on your Docker version):

CONTAINER ID: The unique identifier for the container. This is a shortened version of the full container ID.

NAME: The name of the container. You can assign a name to a container when you run it using the --name option. If you don't specify a name, Docker will generate a random one.

CPU %: The percentage of the host's CPU that the container is currently using. This is a relative value, indicating how much CPU time the container is consuming compared to the total CPU time available on the host. A value of 100% means the container is using one full CPU core. If you have multiple CPU cores, a container can exceed 100%.

MEM USAGE / LIMIT:

MEM USAGE: The amount of memory the container is currently using.
LIMIT: The maximum amount of memory the container is allowed to use. This limit can be set when you run the container using the --memory or -m option. If no limit is set, the container can use all available memory on the host.
MEM %: The percentage of the host's total memory that the container is using. This is calculated as (MEM USAGE / Total Host Memory) * 100. It's important to note that this is relative to the host's total memory, not the container's memory limit (if one is set).

NET I/O: The amount of data the container has sent and received over the network.

NET I/O is further broken down into:
RX: Received data (bytes).
TX: Transmitted data (bytes).
BLOCK I/O: The amount of data the container has read from and written to the block storage (disk).

BLOCK I/O is further broken down into:
READ: Data read from disk (bytes).
WRITE: Data written to disk (bytes).
PIDS: The number of processes (threads) running inside the container.

Example Output:

CONTAINER ID   NAME                  CPU %     MEM USAGE / LIMIT     MEM %     NET I/O       BLOCK I/O     PIDS
a1b2c3d4e5f6   my-web-app            1.23%     123.4MiB / 2GiB     6.17%     1.23kB / 456B   1.23MB / 456kB   12
7890abcdef12   my-database           0.45%     567.8MiB / 4GiB     14.20%    5.67kB / 890B   5.67MB / 890kB   45

______________________________________________________________________________________________________________________________________________


31. docker save -o <output_file> <image_name>
Saves an image to a tar archive.
docker save -o my_image.tar my_image:v1

32. docker load -i <input_file>
Loads an image from a tar archive.
docker load -i my_image.tar

docker export and docker import are commands used for working with container file systems, rather than entire images.
33. docker export <container_id> -o <output_file>
Exports a container's filesystem to a tar archive.
docker export abc123 -o container_fs.tar
docker export b3edda74be2e -o nginx-app:v3.tar
docker export b3edda74be2e | gzip > nginx-app:v3.tar.gz
vi nginx-app:v3.tar.gz

34. docker import <input_file>
Imports a container’s filesystem from a tar archive as an image.
docker import container_fs.tar
docker import nginx-app:v3.tar my-nginx-image:latest
gzip -dc nginx-app:v3.tar.gz | docker import - my-new1-image:latest


The docker pause command suspends all processes within a specified container. This effectively freezes the container's state, 
preventing it from consuming CPU resources or performing any further operations. The container remains in memory, 
and its network connections are preserved.
35. docker pause <container_id>
Pauses all processes within a container.
docker pause abc123


The docker unpause command resumes all processes within a paused container. This restores the container to its previous state, 
allowing it to continue executing from where it was paused.
36. docker unpause <container_id>
Unpauses a paused container, resuming its processes.
docker unpause abc123

37. docker rename <old_name> <new_name>
Renames an existing container.
docker rename old_container_name new_container_name
docker rename b3edda74be2e mycontainer

38. docker update <container_id> --cpus <value>
Updates the resource limits for a container (e.g., CPU).
docker update abc123 --cpus 2
docker update 6a68b7146604  --cpus 1 

39. docker update --memory <value> <container_id>
Updates memory limit for a container.
docker update --memory 512m abc123

40. docker attach <container_id>
Attaches to a running container’s standard input, output,and error streams.
docker attach abc123

41. docker cp <container_id>:/path/to/file <host_destination>
Copies files from a container to the host machine.
docker cp abc123:/var/log/nginx.log /home/user/nginx.log

42. docker diff <container_id>
Shows the changes made to a container's filesystem.
docker diff abc123

43. docker login
Logs into a Docker registry (Docker Hub or private).
docker login

44. docker logout
Logs out from a Docker registry.
docker logout

45. docker history <image_name>
Displays the history of an image’s layers.
docker history ubuntu

46. docker exec <container_id> <command>
Executes a command inside a running container.
docker exec abc123 ls /app

47. docker wait <container_id>
Blocks until a container stops, then prints the exit code.
docker wait abc123

48. docker prune
Cleans up unused containers, networks, images(dangling), and volumes.
docker system prune -a

49. docker image prune
Removes unused or dangling images.
docker image prune -a

50. docker volume prune
Removes unused volumes.
docker volume prune

54. docker network prune
Removes unused networks.
docker network prune

docker system df 
_________________________________________________________________________________

This command is used to display disk usage information for Docker on your system. 
It provides a summary of the amount of disk space being used by Docker’s various components. 
ex: 
TYPE            TOTAL     ACTIVE    SIZE    RECLAIMABLE
Images          5         2         7.2GB   5.3GB (50%)
Containers      3         1         300MB   100MB (33%)
Local Volumes   4         2         500MB   200MB (40%)
Build Cache     2         1         100MB   50MB (50%)


--> sudo docker image prune -a

This command is used to remove unused Docker images from your system. This command is particularly useful for freeing up disk space by getting rid of images that are no longer in use

--> sudo docker system df -v | grep GB (pod size) (applications taking high GB o/p , in that there is ns, copy that)
The command docker system df -v provides a detailed view of disk usage for Docker resources, including images, containers, local volumes, and build cache. Using grep GB with this command filters the output to show only lines containing "GB," which helps you quickly identify the disk space usage in gigabytes

-->sudo docker system prune -a
The docker system prune -a command is used to clean up your Docker environment by removing unused data. This command helps free up disk space by deleting various types of unused Docker objects

Unused Images:

1.All Images: It removes all unused images, not just dangling ones. This includes images that are not currently used by any container and have no tag associated with them.
2.Stopped Containers:
It deletes containers that are no longer running.
3.Unused Networks:
It removes Docker networks that are not currently used by any container.
4. Unused Volumes (if you use --volumes flag):
It also removes volumes that are not used by any container. Note that this requires the --volumes flag to be explicitly specified

docker load -i k8simg.tar.gz
